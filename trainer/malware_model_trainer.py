import logging
import torch
from transformers import Trainer, TrainingArguments, EarlyStoppingCallback, AutoTokenizer, \
    AutoModelForSequenceClassification
from sklearn.metrics import accuracy_score

from utils.database_utils.database_malware_dataset import StratifiedDatabaseMalwareDatasetSqlite

logging.basicConfig(level=logging.INFO)

class MalwareModelTrainer:
    def __init__(self, model, tokenizer,  train_dataset, val_dataset, epochs=3, batch_size=8, save_path='./best_model'):
        self.model = model
        self.train_dataset = train_dataset
        self.val_dataset = val_dataset
        self.epochs = epochs
        self.batch_size = batch_size
        self.save_path = save_path
        self.tokenizer = tokenizer
        self.setup_training_arguments()

    def setup_training_arguments(self):
        self.training_args = TrainingArguments(
            output_dir=self.save_path,
            num_train_epochs=self.epochs,
            per_device_train_batch_size=self.batch_size,
            per_device_eval_batch_size=self.batch_size,
            warmup_steps=500,
            weight_decay=0.01,
            logging_dir=f'{self.save_path}/logs',
            logging_steps=1,
            learning_rate=0.01,
            evaluation_strategy="steps",
            eval_steps=1,
            save_strategy="steps",
            save_steps=500,
            load_best_model_at_end=True,
            metric_for_best_model="accuracy",
            greater_is_better=True
        )

    def compute_metrics(self, pred):
        labels = pred.label_ids
        preds = pred.predictions.argmax(-1)
        acc = accuracy_score(labels, preds)
        return {'accuracy': acc}

    def train(self):
        self.trainer = Trainer(
            model=self.model,
            args=self.training_args,
            train_dataset=self.train_dataset,
            eval_dataset=self.val_dataset,
            compute_metrics=self.compute_metrics,
            callbacks=[EarlyStoppingCallback(early_stopping_threshold=0.01, early_stopping_patience=3)]
        )
        self.trainer.train()
        self.model.save_pretrained(self.save_path)
        self.tokenizer.save_pretrained(self.save_path)


if __name__ == '__main__':
    from utils.database_utils.database_malware_dataset_psql import StratifiedDatabaseMalwareDataset

    model_name = "roberta-large"

    tokenizer = AutoTokenizer.from_pretrained(model_name)

    # Initialize your datasets
    train_dataset = StratifiedDatabaseMalwareDatasetSqlite(tokenizer=tokenizer, split='train',
                                                     max_length=512)  # Tokenizer will be set up by the trainer
    val_dataset = StratifiedDatabaseMalwareDatasetSqlite(tokenizer=tokenizer, split='validation',
                                                   max_length=512)  # Tokenizer will be set up by the trainer

    num_labels = train_dataset.get_num_labels()
    model = AutoModelForSequenceClassification.from_pretrained(model_name, num_labels=num_labels)

    # Initialize and train your model
    trainer = MalwareModelTrainer(model, tokenizer,  train_dataset, val_dataset, epochs=3, batch_size=2,
                                  save_path='./best_model')
    trainer.train()

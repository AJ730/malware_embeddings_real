import json
import numpy as np
import psycopg2

from utils.database_utils.database_extractor import get_features_by_sha


def generate_histogram_bytentropy(sha, feature_dicts):
    # Extract the features for the given SHA
    features = feature_dicts[sha]

    # Extract data for the two features
    histogram = features['histogram']
    byteentropy = features['byteentropy']

    # Pad the shorter list to match the length of the longer one
    max_length = max(len(histogram), len(byteentropy))

    assert max_length == 256
    histogram_padded = np.pad(histogram, (0, max_length - len(histogram)), 'constant')
    byteentropy_padded = np.pad(byteentropy, (0, max_length - len(byteentropy)), 'constant')

    # Combine into a matrix with separate columns
    embeddings_matrix = np.column_stack((histogram_padded, byteentropy_padded))

    return embeddings_matrix


def generate_json_of_features(sha):
    # Get the features for the specified SHA
    features = get_features_by_sha(sha)

    # Create a dictionary to hold the features, excluding 'Combined Feature Vector', 'byteentropy', and 'histogram'
    filtered_features = {key: value for key, value in features.items()
                         if key not in ['Combined Feature Vector', 'byteentropy', 'histogram']}

    # Convert the dictionary to a JSON string
    json_features = json.dumps(filtered_features)

    return json_features


if __name__ == '__main__':
    # File path to your text file
    file_path = 'embedding 2.txt'

    print("Embeddings Matrix:")
    print(generate_json_of_features('5b14a7366cf5dbea3386c6afbd25f012'))
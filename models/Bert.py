
import logging
logging.basicConfig(level=logging.INFO)


from transformers import AutoModelForSequenceClassification, AutoTokenizer, Trainer, TrainingArguments, \
    EarlyStoppingCallback
from sklearn.metrics import accuracy_score

from utils.database_utils.DatabaseMalwareDataset import StratifiedDatabaseMalwareDataset

# Initialize the tokenizer and model
model_name = "roberta-large"
tokenizer = AutoTokenizer.from_pretrained(model_name)


# Define a compute_metrics function
def compute_metrics(pred):
    labels = pred.label_ids
    preds = pred.predictions.argmax(-1)
    acc = accuracy_score(labels, preds)
    return {'accuracy': acc}


# Update TrainingArguments to log validation accuracy every 10 steps
training_args = TrainingArguments(
    output_dir='./results',
    num_train_epochs=3,
    per_device_train_batch_size=8,
    per_device_eval_batch_size=8,
    warmup_steps=500,
    weight_decay=0.01,
    logging_dir='./logs',
    logging_steps=10,  # Log training info every 10 steps
    evaluation_strategy="steps",
    eval_steps=10,  # Evaluate and log accuracy on the validation set every 10 steps
    save_strategy="steps",
    save_steps=500,
    load_best_model_at_end=True,
    metric_for_best_model="accuracy",
    greater_is_better=True
)

train_dataset = StratifiedDatabaseMalwareDataset(tokenizer=tokenizer,  split='train', max_length=512)
val_dataset = StratifiedDatabaseMalwareDataset(tokenizer=tokenizer,  split='validation', max_length=512)

num_labels = train_dataset.get_num_labels()
model = AutoModelForSequenceClassification.from_pretrained(model_name, num_labels=num_labels)

# Initialize Trainer with EarlyStoppingCallback
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,  # Use your actual train dataset
    eval_dataset=val_dataset,  # Use your actual eval dataset
    compute_metrics=compute_metrics,
    callbacks=[EarlyStoppingCallback(early_stopping_threshold=0.01, early_stopping_patience=3)]
    # Add early stopping callback
)

if __name__ == '__main__':
    # Train the model
    trainer.train()
    # Save the model and tokenizer
    model.save_pretrained("./trained_model")
    tokenizer.save_pretrained("./trained_model")

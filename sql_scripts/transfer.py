import sqlite3
import csv
import sys


def create_database_and_table():
    # Connect to the SQLite database. If it doesn't exist, it will be created.
    conn = sqlite3.connect('../malware_db.sqlite')  # This will create the 'malware_db.sqlite' file

    try:
        # Create a cursor object using the cursor() method
        cursor = conn.cursor()

        # Create table as per the above SQL command
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS files (
            sha TEXT PRIMARY KEY,
            llm_text TEXT, 
            family_name TEXT
        )''')

        # Commit the transaction
        conn.commit()
    finally:
        # Ensure the connection is closed even if an error occurs
        conn.close()



def import_data_from_csv(csv_file_path):
    # Connect to the SQLite database
    conn = sqlite3.connect('../malware_db.sqlite')

    try:
        cursor = conn.cursor()

        safe_max_int = 2 ** 31 - 1

        try:
            csv.field_size_limit(safe_max_int)
        except OverflowError:
            print("Warning: Unable to set field size limit to sys.maxsize. Using the maximum safe limit instead.")

        # Open the CSV file and insert each row into the table
        with open(csv_file_path, 'r') as csv_file:
            # Create a CSV reader object
            csv_reader = csv.reader(csv_file)

            # Skip the header row if your CSV has one
            next(csv_reader, None)

            # Insert rows into the SQLite table. Ensure the number of placeholders matches the number of columns in the CSV.
            for row in csv_reader:
                # Adjust this line to match the number of columns in your CSV and table structure
                cursor.execute('INSERT INTO files (sha, llm_text, family_name) VALUES (?, ?, ?)', row)

        # Commit the transaction
        conn.commit()
    finally:
        # Ensure the connection is closed even if an error occurs
        conn.close()

if __name__ == '__main__':
    # Path to your CSV file
    csv_file_path = '../malware.csv'  # Update this path to the actual path of your CSV file

    # Create the database and table
    create_database_and_table()

    # Import data from the CSV file
    import_data_from_csv(csv_file_path)
